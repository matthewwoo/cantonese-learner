generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  articles          Article[]
  chatSessions      ChatSession[]
  flashcardSets     FlashcardSet[]
  readingSessions   ReadingSession[]
  readingSessionsV2 ReadingSessionV2[]
  studySessions     StudySession[]

  @@map("users")
}

model FlashcardSet {
  id          String      @id @default(cuid())
  name        String
  userId      String
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]

  @@map("flashcard_sets")
}

model Flashcard {
  id                     String       @id @default(cuid())
  chineseWord            String
  englishTranslation     String
  flashcardSetId         String
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  exampleSentenceEnglish String?
  exampleSentenceChinese String?
  pronunciation          String?
  flashcardSet           FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)
  studyCards             StudyCard[]

  @@map("flashcards")
}

model StudySession {
  id          String      @id @default(cuid())
  userId      String
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  totalCards  Int         @default(20)
  studyCards  StudyCard[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_sessions")
}

model StudyCard {
  id             String       @id @default(cuid())
  flashcardId    String
  studySessionId String
  easeFactor     Float        @default(2.5)
  interval       Int          @default(0)
  repetitions    Int          @default(0)
  nextReviewDate DateTime     @default(now())
  wasCorrect     Boolean?
  responseTime   Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  flashcard      Flashcard    @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)

  @@map("study_cards")
}

model ChatSession {
  id          String        @id @default(cuid())
  userId      String
  theme       String
  targetWords Json
  startedAt   DateTime      @default(now())
  endedAt     DateTime?
  messages    ChatMessage[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  chatSessionId String
  role          String
  content       String
  translation   String?
  createdAt     DateTime    @default(now())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Article {
  id                String             @id @default(cuid())
  userId            String
  title             String
  sourceUrl         String?
  originalContent   Json
  translatedContent Json
  wordDefinitions   Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  difficulty        String?
  estimatedMinutes  Int?
  sentenceCount     Int?
  sentences         Json?
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingSessions   ReadingSession[]
  readingSessionsV2 ReadingSessionV2[]

  @@map("articles")
}

model ReadingSession {
  id               String    @id @default(cuid())
  userId           String
  articleId        String
  currentPosition  Int       @default(0)
  readingSpeed     Float     @default(1.0)
  showTranslation  Boolean   @default(true)
  startedAt        DateTime  @default(now())
  lastReadAt       DateTime  @updatedAt
  completedAt      DateTime?
  totalReadingTime Int       @default(0)
  article          Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reading_sessions")
}

model ReadingSessionV2 {
  id               String    @id @default(cuid())
  userId           String
  articleId        String
  currentCardIndex Int       @default(0)
  totalCards       Int
  completedCards   Int[]     @default([])
  autoPlayTTS      Boolean   @default(true)
  ttsSpeed         Float     @default(1.0)
  showTranslation  Boolean   @default(false)
  startedAt        DateTime  @default(now())
  lastActiveAt     DateTime  @updatedAt
  completedAt      DateTime?
  cardsFlipped     Int[]     @default([])
  audioReplays     Json?
  timePerCard      Json?
  article          Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reading_sessions_v2")
}
